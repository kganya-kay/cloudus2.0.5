// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Project {
    id   Int    @id @default(autoincrement())
    name String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy    User     @relation(fields: [createdById], references: [id])
    createdById  String
    type         String
    price        Int      @default(000)
    description  String
    image        String   @default("https://utfs.io/f/zFJP5UraSTwK07wECkD6zpt79ehTVJxMrYIoKdqLl2gOj1Zf")
    count        Int      @default(autoincrement())
    link         String
    links        String[]
    contributors User[]   @relation("name")
    api          String
    openSource   Boolean  @default(true)
    privacy      Boolean  @default(false)
    completed    Boolean  @default(false)
    status       String   @default("Initialized")
    likes        Like[]   @relation("name")
    upvotes      Upvote[] @relation("name")
    
    comments    Comment [] @relation("name")
    cost            Int @default(0)
    rating      Int @default(5)
    @@index([name])
}
model Comment {
    id      Int       @id @default(autoincrement())
    Project Project[] @relation("name")
    shopItem ShopItem[] @relation("name")
    createdById String
}

model Upvote {
    id      Int       @id @default(autoincrement())
    Project Project[] @relation("name")
    shopItem ShopItem[] @relation("name")
    createdById String
}

model Like {
    id      Int       @id @default(autoincrement())
    Project Project[] @relation("name")
    shopItem ShopItem [] @relation("name")
    createdById String
}

model ShopItem {
    id   Int    @id @default(autoincrement())
    name String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy    User     @relation(fields: [createdById], references: [id])
    createdById  String
    type         String
    price        Int
    description  String
    image        String   @default("https://utfs.io/f/zFJP5UraSTwK07wECkD6zpt79ehTVJxMrYIoKdqLl2gOj1Zf")
    count        Int      @default(autoincrement())
    link         String
    contributors User[]   @relation("name")
    api          String
    links        String[]

    orders  Order[]
    orderId Int     @default(autoincrement())

    @@index([name])
    Order Order[] @relation("name")
    Comment Comment[] @relation("name")
    Upvote Upvote[] @relation("name")
    Like Like[] @relation("name")
}

model Order {
    id   Int    @id @default(autoincrement())
    name String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    price        Int
    description  String
    image        String   @default("https://utfs.io/f/zFJP5UraSTwK07wECkD6zpt79ehTVJxMrYIoKdqLl2gOj1Zf")
    count        Int      @default(autoincrement())
    link         String
    api          String
    links        String[]
    createdFor   ShopItem @relation(fields: [createdForId], references: [id])
    createdForId Int
    shopItems ShopItem [] @relation("name")
    @@index([name])
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]
    posts    Post[]

    projects Project[]

    Project Project[] @relation("name")

    ShopItem ShopItem[] @relation("name")

    ShopItems ShopItem[]

    Orders Order[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
